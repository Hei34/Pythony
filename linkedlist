from typing import Any

class Node:
    value: Any
    next: 'Node'
    def __init__(self, v1):
        self.value = v1
        self.next = None
    def __str__(self):
        return '[' + str(self.value)+ ' -> ' + str(self.next.value) + ']'
class LinkedList:
    head: Node
    tail: Node
    def __init__(self):
        self.head = None
        self.tail = None
        self.len = 0
    def push(self, v1):
        if self.head == None:
            self.tail = self.head = Node(v1)
            self.len += 1
        else:
            nnode = Node(v1)
            nnode.next = self.head
            self.head = nnode
            self.len += 1
    def node(self, x):
        temp = self.head
        i = 0
        while i < x:
            temp = temp.next
            i += 1
        return temp
    def insert(self, v1, node):
        nnode = Node(v1)
        nnode.next = node.next
        node.next = nnode
    def pop(self):
        self.head = self.head.next
        return self.head
    def append(self,v1):
        self.len += 1
        temp = self.head
        while temp.next != None:
            temp = temp.next
        temp.next = Node(v1)
        self.tail = temp.next
    def __str__(self):
        result = ""
        node = self.head
        if node != None:
            result += str(node.value)
            node = node.next
            while node:
                result += " -> " + str(node.value)
                node = node.next
        return result


ll = LinkedList()
print(ll); print(ll.tail)
assert ll.head == None and ll.tail == None
ll.push(1)
print(ll); print(ll.tail.value)
ll.push(0);
print( str(ll) + "; ogona_wartosc=" + str(ll.tail.value))
assert str(ll) == '0 -> 1'
assert ll.tail.value == 1


ll.append(9)
ll.append(10)
print( str(ll) + "; ogona_wartosc=" + str(ll.tail.value))
assert str(ll) == '0 -> 1 -> 9 -> 10';
print(ll.tail.value)
assert ll.tail.value == 10

ltmp = LinkedList()
ltmp.push(11)
print( str(ltmp) + "; ogona_wartosc=" + str(ltmp.tail.value))
ltmp = None
print("")

middle_node = ll.node(x=1)
print(middle_node.value)
assert (middle_node.value == 1)
ll.insert(5, node= middle_node)
print( str(ll) + "; ogona_wartosc=" + str(ll.tail.value))
assert str(ll) == '0 -> 1 -> 5 -> 9 -> 10'

class TreeNode():
    def __init__(self,value):
        self.value = value
        self.children = []
    def __str__(self):
        str1 = str(self.value)+" "
        for i in self.children:
            str1 += ''+ str(i)+''
        return str1
    def add(self,child):
        self.children.append(child)
    def is_leaf(self):
        if self.children == []:
            return True
        return False
    def visit(self):
        # wartosci_dzieci = []
        # for i in self.children:
        #     wartosci_dzieci.append(i.value)
        return self.children
    def deep_first_lvl3(self):
        kolejka = []
        kolejka.append(self.value)
        if self.children != []:
            for i in self.children:
                kolejka.append(i.value)
                for j in i.children:
                    kolejka.append(j.value)
                    for g in j.children:
                        kolejka.append(g.value)
        return kolejka
    def deep_first(self):
        if self.children != []:
            print(self)
            for i in self.visit():
                i.deep_first()
    def level_order(self):
        if self.children != []:
            print(self.value)
            for i in self.children:
                print(i.value)
class Tree():
    def __init__(self,TreeNode):
        self.root = Treenode

TN1 = TreeNode('F')
TN2 = TreeNode('B')
TN3 = TreeNode('G')
TN4 = TreeNode('A')
TN5 = TreeNode('D')
TN6 = TreeNode('I')
TN7 = TreeNode('H')
TN8 = TreeNode('C')
TN9 = TreeNode('E')
TN1.add(TN2)
TN1.add(TN3)
TN2.add(TN4)
TN2.add(TN5)
TN5.add(TN8)
TN5.add(TN9)
TN3.add(TN6)
TN6.add(TN7)
# print(TN1.deep_first_lvl3())
# TN1.deep_first()
TN1.level_order()
